scalar Date
type Query {
    posts: String!
    challenges: String!
    cruises: String!
    comments: String!
    users: String!
    user: String!
    post: String!
    cruise: String!
    challenge: String!
}
type Mutation {
    createUser(input: CreateUserInput!): UserMutationResponse!
    updateUser(input: UpdateUserInput!): UserMutationResponse!
    createPost(input: CreatePostInput!): CreatePostMutationResponse!
    createChallenge(input: CreateChallengeInput!): CreateChallengeMutationResponse!
    createCruise(input: CreateCruiseInput!): CreateCruiseMutationResponse!
    createComment(input: CreateCommentInput!): CreateCommentMutationResponse!
    createReaction(input: CreateReactionInput!): CreateReactionMutationResponse!
    deleteReaction(input: DeleteReactionInput!) : CreateReactionMutationResponse!
    followEntity(input: FollowEntityInput!): FollowEntityMutationResponse!
    unfollowEntity(input: FollowEntityInput!): FollowEntityMutationResponse!
}

interface MutationResponse {
  code: String!
  success: Boolean!
  message: String!
}

type UserMutationResponse implements MutationResponse{
  code: String!
  success: Boolean!
  message: String!
  user: User
}

type CreatePostMutationResponse implements MutationResponse {
  code: String!
  success: Boolean!
  message: String!
  post: Post
}

type CreateCruiseMutationResponse implements MutationResponse {
   code: String!
   success: Boolean!
   message: String!
   cruise: Cruise
}

type CreateChallengeMutationResponse implements MutationResponse {
    code: String!
    success: Boolean!
    message: String!
    challenge: Challenge
}

type CreateCommentMutationResponse implements MutationResponse {
    code: String!
    success: Boolean!
    message: String!
    comment: Comment
}

type CreateReactionMutationResponse implements MutationResponse {
    code: String!
    success: Boolean!
    message: String!
    reaction: Reaction
}

type FollowEntityMutationResponse implements MutationResponse {
    code: String!
    success: Boolean!
    message: String!
    entityId: Int
}

input CreateUserInput {
    email: String! 
    firstName: String! 
    lastName: String! 
    uid: String!
}

input UpdateUserInput {
    firstName: String 
    lastName: String  
    imgUrl: String 
    userName: String 
    uid: String!
}

input LocationInput {
    lat: Float!
    long: Float!
}

input CreatePostInput {
    attachmentType: AttachmentType!
    uid: String!
    location: LocationInput
    content: String
    fileAttachment: FileInput!
}

input CreateChallengeInput {
    uid: String!
    challenge: String!
    attachmentType: AttachmentType!
    fileAttachment: FileInput!
    start: Date
    end: Date
}

input CreateCruiseInput {
    uid: String!
    slogan: String!
    attachmentType: AttachmentType!
    fileAttachment: FileInput!
}

input CreateCommentInput {
    entityId: Int!
    uid: String!
    comment: String!
    attachmentType: AttachmentType
    fileAttachment: FileInput
    entityType: EntityType!
}

input CreateReactionInput {
    uid: String!
    entityId: Int!
    entityType: EntityType!
    reactionType: ReactionType!
}

input DeleteReactionInput {
    uid: String!
    entityId: Int!
    entityType: EntityType!
    reactionType: ReactionType!
}

input FileInput {
    mimetype: String!
    filename: String!
    encoding: String!
    url: String!
}

input FollowEntityInput {
    id: Int!
    uid: String!
    entityType: EntityType!
}

type LatLng {
    lat: Float
    long: Float
}

type File {
    filename: String!
    mimetype: String!
    encoding: String!
    url: String!
}

type Reaction {
    hearts: Int!
    kisses: Int!
    hot: Int!
}
enum AttachmentType {
    VIDEO
    IMAGE
    AUDIO
}
enum EntityType {
    POST
    CHALLENGE
    CRUISE
}

enum ReactionType {
    KISSES
    HEARTS
    HOT
}

type User {
    userId: Int!
    uid: String!
    firstName: String!
    lastName: String!
    userName: String
    email: String!
    created: Date!  
    updated: Date!
    location: LatLng
    posts: [Post]!
    followers: [User]!
    following: [User]!
    cruises: [Cruise]!
    cruiseFollowing: [Cruise]!
    challenges: [Challenge]!
    challengeFollowing: [Challenge]!
}

type Post {
    id: Int!         
    attachmentType: AttachmentType!   
    attachmentMeta: File    
    user: User       
    userId: String!    
    attachmentUrl: String     
    content: String  
    hashtags: [String]    
    reaction: Reaction!  
    location: LatLng 
    comments: [Comment]!  
    cruiseId: Int   
    challengeId: Int
    created: Date!  
    updated: Date!
}

type Challenge {
    id: Int!       
    creator: User!  
    challenge: String!
    attachmentType: AttachmentType
    attachmentUrl: String!
    attachmentMeta: File
    creatorId: String!
    followers: [User]!
    start: String!  
    hashtags: [String] 
    reaction: Reaction! 
    kisses: [String]!
    hearts: [String]!
    hot: [String]!  
    end: String! 
    comments: [Comment]!      
    created: Date!  
    updated: Date! 
    posts: [Post]!
}

type Comment {
    id: Int!     
    entityId: Int!  
    comment: String!
    attachmentType: AttachmentType
    attachmentUrl: String
    attachmentMeta: File
    userId: String! 
    hashtags: [String] 
    user: User! 
    reaction: Reaction!  
    kisses: [String]!
    hearts: [String]!
    hot: [String]!
    created: Date!  
    updated: Date!
    cruise:  Cruise
    post: Post
    challenge: Challenge
}

type Cruise {
    id: Int!     
    creator: User! 
    slogan: String!  
    attachmentType: AttachmentType
    attachmentUrl: String!
    attachmentMeta: File
    creatorId: Int!
    reaction: Reaction! 
    kisses: [String]!
    hearts: [String]!
    hot: [String]!
    hashtags: [String] 
    followers: [User]!
    comments: [Comment]! 
    created: Date!  
    updated: Date!
    posts: [Post]! 
}