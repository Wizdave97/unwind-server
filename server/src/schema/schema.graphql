scalar Date
scalar IntString
scalar Mode
type Query {
    posts(filters: PostInputFilter, sort: PostSortInput, first: Int, last: Int, after: String, before: String): PostConnection!
    challenges(filters: ChallengeInputFilter, sort: ChallengeSortInput, first: Int, last: Int, after: String, before: String): ChallengeConnection!
    comments(filters: CommentInputFilter, sort: CommentSortInput, first: Int, last: Int, after: String, before: String): CommentConnection!
    users(filters:UserInputFilter, sort: UserSortInput, first: Int, last: Int, after: String, before: String): UserConnection!
    user(id: String!): User
    post(id: Int!): Post
    challenge(id: String!): Challenge
    fetchAppLockStatus: AppLockStatus!
}
type Mutation {
    createUser(input: CreateUserInput!): UserMutationResponse!
    updateUser(input: UpdateUserInput!): UserMutationResponse!
    createPost(input: CreatePostInput!): CreatePostMutationResponse!
    createChallenge(input: CreateChallengeInput!): CreateChallengeMutationResponse!
    createComment(input: CreateCommentInput!): CreateCommentMutationResponse!
    createReaction(input: CreateReactionInput!): CreateReactionMutationResponse!
    deleteReaction(input: DeleteReactionInput!) : CreateReactionMutationResponse!
    followEntity(input: FollowEntityInput!): FollowEntityMutationResponse!
    unfollowEntity(input: FollowEntityInput!): FollowEntityMutationResponse!
    followUser(input: UserFollowInput!): UserFollowMutationResponse!
    unfollowUser(input: UserFollowInput!): UserFollowMutationResponse!
    enablePeek: EnablePeekMutationResponse!
}

interface MutationResponse {
  code: String!
  success: Boolean!
  message: String!
}

type PageInfo {
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
    startCursor: String
    endCursor: String
}

type UserMutationResponse implements MutationResponse{
  code: String!
  success: Boolean!
  message: String!
  user: User
}

type CreatePostMutationResponse implements MutationResponse {
  code: String!
  success: Boolean!
  message: String!
  post: Post
}


type CreateChallengeMutationResponse implements MutationResponse {
    code: String!
    success: Boolean!
    message: String!
    challenge: Challenge
}

type CreateCommentMutationResponse implements MutationResponse {
    code: String!
    success: Boolean!
    message: String!
    comment: Comment
}

type CreateReactionMutationResponse implements MutationResponse {
    code: String!
    success: Boolean!
    message: String!
    reaction: Reaction
}

type FollowEntityMutationResponse implements MutationResponse {
    code: String!
    success: Boolean!
    message: String!
    entityId: Int
}

type UserFollowMutationResponse implements MutationResponse {
    code: String!
    success: Boolean!
    message: String!
    user: User
}

type EnablePeekMutationResponse implements MutationResponse {
    code: String!
    success: Boolean!
    message: String!
}

## Input types

input CreateUserInput {
    email: String! 
    firstName: String! 
    lastName: String! 
    uid: String!
}

input UpdateUserInput {
    firstName: String 
    lastName: String  
    imgUrl: String 
    userName: String 
    bio: String
    cruise: String
    uid: String!
}

input LocationInput {
    lat: Float!
    long: Float!
}

input CreatePostInput {
    attachmentType: AttachmentType
    uid: String!
    location: LocationInput
    content: String!
    fileAttachment: FileInput
    challengeId: Int
}

input CreateChallengeInput {
    uid: String!
    challenge: String!
    attachmentType: AttachmentType
    fileAttachment: FileInput
    start: Date
    end: Date
}


input CreateCommentInput {
    entityId: Int!
    uid: String!
    comment: String!
    attachmentType: AttachmentType
    fileAttachment: FileInput
    entityType: EntityType!
}

input CreateReactionInput {
    uid: String!
    entityId: Int!
    entityType: EntityType!
    reactionType: ReactionType!
}

input DeleteReactionInput {
    uid: String!
    entityId: Int!
    entityType: EntityType!
    reactionType: ReactionType!
}

input FileInput {
    mimetype: String!
    filename: String!
    encoding: String!
    url: String!
}

input FollowEntityInput {
    id: Int!
    uid: String!
    entityType: EntityType!
}

input UserFollowInput {
    currentUid: String!
    followUid: String!
}


## Object types


type LatLng {
    lat: Float
    long: Float
}

type File {
    filename: String!
    mimetype: String!
    encoding: String!
    url: String!
}

type Reaction {
    hearts: Int!
    hot: Int!
}
enum AttachmentType {
    VIDEO
    IMAGE
    AUDIO
}
enum EntityType {
    POST
    CHALLENGE
}

enum AppLock {
    UNLOCKED
    LOCKED
}

enum ReactionType {
    HEARTS
    HOT
}

enum PostOrigin {
    REGULAR
    OGCHALLENGE
}

enum SortEnum {
    desc
    asc
}

type AppLockStatus {
    status: AppLock!
}

type User {
    userId: Int!
    uid: String!
    firstName: String!
    lastName: String!
    userName: String
    email: String!
    created: Date!  
    updated: Date!
    location: LatLng
    posts(filters: PostInputFilter, first: Int, last: Int, after: String, before: String): PostConnection!
    followers(filters:UserInputFilter, first: Int, last: Int, after: String, before: String): UserConnection!
    following(filters:UserInputFilter, first: Int, last: Int, after: String, before: String): UserConnection!
    challenges(filters: ChallengeInputFilter, first: Int, last: Int, after: String, before: String): ChallengeConnection!
    challengeFollowing(filters: ChallengeInputFilter, first: Int, last: Int, after: String, before: String): ChallengeConnection!
}

type Post {
    id: Int!         
    attachmentType: AttachmentType   
    attachmentMeta: File    
    user: User!       
    userId: String!    
    attachmentUrl: String     
    content: String!  
    hashtags: [String!]    
    reaction: Reaction!  
    location: LatLng 
    comments(filters: CommentInputFilter, first: Int, last: Int, after: String, before: String): CommentConnection!   
    challengeId: Int
    origin: PostOrigin!
    created: Date!  
    updated: Date!
    reactedUsers: [User!]
}

type Challenge {
    id: Int!       
    user: User!  
    challenge: String!
    attachmentType: AttachmentType
    attachmentUrl: String
    attachmentMeta: File
    userId: String!
    followers(filters:UserInputFilter, first: Int, last: Int, after: String, before: String): UserConnection!
    start: String!  
    hashtags: [String!] 
    reaction: Reaction!  
    end: String! 
    comments(filters: CommentInputFilter, first: Int, last: Int, after: String, before: String): CommentConnection!     
    created: Date!  
    updated: Date! 
    posts(filters: PostInputFilter, first: Int, last: Int, after: String, before: String): PostConnection!
}

type Comment  {
    id: Int!     
    entityId: Int!  
    comment: String!
    attachmentType: AttachmentType
    attachmentUrl: String
    attachmentMeta: File
    userId: String! 
    hashtags: [String!] 
    user: User! 
    reaction: Reaction!  
    created: Date!  
    updated: Date!
    post: Post
    challenge: Challenge
}

# Edges and Connection Definitions

type UserConnection{
    pageInfo: PageInfo!
    edges: [UserEdge!]!
}

type UserEdge {
    cursor: String!
    node: User!
}

type PostConnection{
    pageInfo: PageInfo!
    edges: [PostEdge!]!
}

type PostEdge {
    cursor: String!
    node: Post!
}


type ChallengeConnection {
    pageInfo: PageInfo!
    edges: [ChallengeEdge!]!
}

type ChallengeEdge {
    cursor: String!
    node: Challenge!
}

type CommentConnection {
    pageInfo: PageInfo!
    edges: [CommentEdge!]!
}

type CommentEdge {
    cursor: String!
    node: Comment!
}


# Query Input Filters Definitions

input NumberExpressionInput {
    gte: Int
    gt: Int
    lt: Int
    lte: Int
    equals: IntString
}

input StringExpressionInput {
    contains: String
    mode: Mode
    startsWith: String
    endsWith: String
    equals: IntString
    notIn: [IntString!]
    in: [IntString!]
}

input ListExpressionInput{
    hasSome: [IntString!]
}


input PostInputFilter {
    id: NumberExpressionInput
    user: UserInputFilter
    content: StringExpressionInput
    origin: PostOrigin
    hashtags: ListExpressionInput
    comments: CommentRelationFilter
    challenge: ChallengeInputFilter
    AND: [PostInputFilter!]
    OR: [PostInputFilter!]
}

input UserInputFilter {
    uid: StringExpressionInput
    firstName: StringExpressionInput
    lastName: StringExpressionInput
    userName: StringExpressionInput
    bio: StringExpressionInput
    challengeFollowing: ChallengeRelationFilter
    following: UserRelationFilter
    followers: UserRelationFilter
    AND: [UserInputFilter!]
    OR: [UserInputFilter!]

}
input UserRelationFilter {
    every: UserInputFilter
}

input ChallengeInputFilter {
    id: NumberExpressionInput
    challenge: StringExpressionInput
    creator: UserInputFilter
    hashtags: ListExpressionInput
    created: StringExpressionInput
    updated: StringExpressionInput
    kisses: ListExpressionInput
    hot: ListExpressionInput
    hearts: ListExpressionInput
    post: PostInputFilter
    AND: [ChallengeInputFilter!]
    OR: [ChallengeInputFilter!]
}

input CommentInputFilter {
    id: NumberExpressionInput
    comment: StringExpressionInput
    user: UserInputFilter
    post: PostInputFilter
    challenge: ChallengeInputFilter
    kisses: ListExpressionInput
    hot: ListExpressionInput
    hearts: ListExpressionInput
    AND: [CommentInputFilter!]
    OR: [CommentInputFilter!]
}

input CommentRelationFilter {
    every: CommentInputFilter
}
input PostRelationFilter {
    every: PostInputFilter
}

input ChallengeRelationFilter {
    every: ChallengeInputFilter
}


input UserSortInput {
    firstName: SortEnum
    lastName: SortEnum
    email: SortEnum
    userName: SortEnum
    created: SortEnum
}

input PostSortInput {
    hearts: SortEnum
    hot: SortEnum
}

input ChallengeSortInput {
    hearts: SortEnum
    hot: SortEnum
}

input CommentSortInput {
    hearts: SortEnum
    hot: SortEnum
}

